/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LEDS_H
#define _MOCK_LEDS_H

#include "unity.h"
#include "leds.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_leds_Init(void);
void mock_leds_Destroy(void);
void mock_leds_Verify(void);




#define LED_encender_Ignore() LED_encender_CMockIgnore()
void LED_encender_CMockIgnore(void);
#define LED_encender_Expect(lampara) LED_encender_CMockExpect(__LINE__, lampara)
void LED_encender_CMockExpect(UNITY_LINE_TYPE cmock_line, gpioMap_t lampara);
typedef void (* CMOCK_LED_encender_CALLBACK)(gpioMap_t lampara, int cmock_num_calls);
void LED_encender_AddCallback(CMOCK_LED_encender_CALLBACK Callback);
void LED_encender_Stub(CMOCK_LED_encender_CALLBACK Callback);
#define LED_encender_StubWithCallback LED_encender_Stub
#define LED_encender_IgnoreArg_lampara() LED_encender_CMockIgnoreArg_lampara(__LINE__)
void LED_encender_CMockIgnoreArg_lampara(UNITY_LINE_TYPE cmock_line);
#define LED_apagar_Ignore() LED_apagar_CMockIgnore()
void LED_apagar_CMockIgnore(void);
#define LED_apagar_Expect(lampara) LED_apagar_CMockExpect(__LINE__, lampara)
void LED_apagar_CMockExpect(UNITY_LINE_TYPE cmock_line, gpioMap_t lampara);
typedef void (* CMOCK_LED_apagar_CALLBACK)(gpioMap_t lampara, int cmock_num_calls);
void LED_apagar_AddCallback(CMOCK_LED_apagar_CALLBACK Callback);
void LED_apagar_Stub(CMOCK_LED_apagar_CALLBACK Callback);
#define LED_apagar_StubWithCallback LED_apagar_Stub
#define LED_apagar_IgnoreArg_lampara() LED_apagar_CMockIgnoreArg_lampara(__LINE__)
void LED_apagar_CMockIgnoreArg_lampara(UNITY_LINE_TYPE cmock_line);
#define LED_titilarA_Ignore() LED_titilarA_CMockIgnore()
void LED_titilarA_CMockIgnore(void);
#define LED_titilarA_Expect(lampara) LED_titilarA_CMockExpect(__LINE__, lampara)
void LED_titilarA_CMockExpect(UNITY_LINE_TYPE cmock_line, gpioMap_t lampara);
typedef void (* CMOCK_LED_titilarA_CALLBACK)(gpioMap_t lampara, int cmock_num_calls);
void LED_titilarA_AddCallback(CMOCK_LED_titilarA_CALLBACK Callback);
void LED_titilarA_Stub(CMOCK_LED_titilarA_CALLBACK Callback);
#define LED_titilarA_StubWithCallback LED_titilarA_Stub
#define LED_titilarA_IgnoreArg_lampara() LED_titilarA_CMockIgnoreArg_lampara(__LINE__)
void LED_titilarA_CMockIgnoreArg_lampara(UNITY_LINE_TYPE cmock_line);
#define LED_titilarC_Ignore() LED_titilarC_CMockIgnore()
void LED_titilarC_CMockIgnore(void);
#define LED_titilarC_Expect(lampara) LED_titilarC_CMockExpect(__LINE__, lampara)
void LED_titilarC_CMockExpect(UNITY_LINE_TYPE cmock_line, gpioMap_t lampara);
typedef void (* CMOCK_LED_titilarC_CALLBACK)(gpioMap_t lampara, int cmock_num_calls);
void LED_titilarC_AddCallback(CMOCK_LED_titilarC_CALLBACK Callback);
void LED_titilarC_Stub(CMOCK_LED_titilarC_CALLBACK Callback);
#define LED_titilarC_StubWithCallback LED_titilarC_Stub
#define LED_titilarC_IgnoreArg_lampara() LED_titilarC_CMockIgnoreArg_lampara(__LINE__)
void LED_titilarC_CMockIgnoreArg_lampara(UNITY_LINE_TYPE cmock_line);
#define LED_titilar_Ignore() LED_titilar_CMockIgnore()
void LED_titilar_CMockIgnore(void);
#define LED_titilar_Expect(lampara) LED_titilar_CMockExpect(__LINE__, lampara)
void LED_titilar_CMockExpect(UNITY_LINE_TYPE cmock_line, gpioMap_t lampara);
typedef void (* CMOCK_LED_titilar_CALLBACK)(gpioMap_t lampara, int cmock_num_calls);
void LED_titilar_AddCallback(CMOCK_LED_titilar_CALLBACK Callback);
void LED_titilar_Stub(CMOCK_LED_titilar_CALLBACK Callback);
#define LED_titilar_StubWithCallback LED_titilar_Stub
#define LED_titilar_IgnoreArg_lampara() LED_titilar_CMockIgnoreArg_lampara(__LINE__)
void LED_titilar_CMockIgnoreArg_lampara(UNITY_LINE_TYPE cmock_line);
#define ledinicializacion_Ignore() ledinicializacion_CMockIgnore()
void ledinicializacion_CMockIgnore(void);
#define ledinicializacion_Expect() ledinicializacion_CMockExpect(__LINE__)
void ledinicializacion_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_ledinicializacion_CALLBACK)(int cmock_num_calls);
void ledinicializacion_AddCallback(CMOCK_ledinicializacion_CALLBACK Callback);
void ledinicializacion_Stub(CMOCK_ledinicializacion_CALLBACK Callback);
#define ledinicializacion_StubWithCallback ledinicializacion_Stub
#define leds_Estado_cerrado_Ignore() leds_Estado_cerrado_CMockIgnore()
void leds_Estado_cerrado_CMockIgnore(void);
#define leds_Estado_cerrado_Expect() leds_Estado_cerrado_CMockExpect(__LINE__)
void leds_Estado_cerrado_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_leds_Estado_cerrado_CALLBACK)(int cmock_num_calls);
void leds_Estado_cerrado_AddCallback(CMOCK_leds_Estado_cerrado_CALLBACK Callback);
void leds_Estado_cerrado_Stub(CMOCK_leds_Estado_cerrado_CALLBACK Callback);
#define leds_Estado_cerrado_StubWithCallback leds_Estado_cerrado_Stub
#define leds_Estado_abriendo_Ignore() leds_Estado_abriendo_CMockIgnore()
void leds_Estado_abriendo_CMockIgnore(void);
#define leds_Estado_abriendo_Expect() leds_Estado_abriendo_CMockExpect(__LINE__)
void leds_Estado_abriendo_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_leds_Estado_abriendo_CALLBACK)(int cmock_num_calls);
void leds_Estado_abriendo_AddCallback(CMOCK_leds_Estado_abriendo_CALLBACK Callback);
void leds_Estado_abriendo_Stub(CMOCK_leds_Estado_abriendo_CALLBACK Callback);
#define leds_Estado_abriendo_StubWithCallback leds_Estado_abriendo_Stub
#define leds_Estado_abierto_Ignore() leds_Estado_abierto_CMockIgnore()
void leds_Estado_abierto_CMockIgnore(void);
#define leds_Estado_abierto_Expect() leds_Estado_abierto_CMockExpect(__LINE__)
void leds_Estado_abierto_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_leds_Estado_abierto_CALLBACK)(int cmock_num_calls);
void leds_Estado_abierto_AddCallback(CMOCK_leds_Estado_abierto_CALLBACK Callback);
void leds_Estado_abierto_Stub(CMOCK_leds_Estado_abierto_CALLBACK Callback);
#define leds_Estado_abierto_StubWithCallback leds_Estado_abierto_Stub
#define leds_Estado_parado_Ignore() leds_Estado_parado_CMockIgnore()
void leds_Estado_parado_CMockIgnore(void);
#define leds_Estado_parado_Expect() leds_Estado_parado_CMockExpect(__LINE__)
void leds_Estado_parado_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_leds_Estado_parado_CALLBACK)(int cmock_num_calls);
void leds_Estado_parado_AddCallback(CMOCK_leds_Estado_parado_CALLBACK Callback);
void leds_Estado_parado_Stub(CMOCK_leds_Estado_parado_CALLBACK Callback);
#define leds_Estado_parado_StubWithCallback leds_Estado_parado_Stub
#define leds_Estado_cerrando_Ignore() leds_Estado_cerrando_CMockIgnore()
void leds_Estado_cerrando_CMockIgnore(void);
#define leds_Estado_cerrando_Expect() leds_Estado_cerrando_CMockExpect(__LINE__)
void leds_Estado_cerrando_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_leds_Estado_cerrando_CALLBACK)(int cmock_num_calls);
void leds_Estado_cerrando_AddCallback(CMOCK_leds_Estado_cerrando_CALLBACK Callback);
void leds_Estado_cerrando_Stub(CMOCK_leds_Estado_cerrando_CALLBACK Callback);
#define leds_Estado_cerrando_StubWithCallback leds_Estado_cerrando_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
