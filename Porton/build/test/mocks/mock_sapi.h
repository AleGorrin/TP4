/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SAPI_H
#define _MOCK_SAPI_H

#include "unity.h"
#include "sapi.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_sapi_Init(void);
void mock_sapi_Destroy(void);
void mock_sapi_Verify(void);




#define gpioRead_IgnoreAndReturn(cmock_retval) gpioRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpioRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define gpioRead_ExpectAndReturn(pin, cmock_retval) gpioRead_CMockExpectAndReturn(__LINE__, pin, cmock_retval)
void gpioRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpioMap_t pin, bool_t cmock_to_return);
typedef bool_t (* CMOCK_gpioRead_CALLBACK)(gpioMap_t pin, int cmock_num_calls);
void gpioRead_AddCallback(CMOCK_gpioRead_CALLBACK Callback);
void gpioRead_Stub(CMOCK_gpioRead_CALLBACK Callback);
#define gpioRead_StubWithCallback gpioRead_Stub
#define gpioRead_IgnoreArg_pin() gpioRead_CMockIgnoreArg_pin(__LINE__)
void gpioRead_CMockIgnoreArg_pin(UNITY_LINE_TYPE cmock_line);
#define gpioWrite_IgnoreAndReturn(cmock_retval) gpioWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpioWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define gpioWrite_ExpectAndReturn(pin, value, cmock_retval) gpioWrite_CMockExpectAndReturn(__LINE__, pin, value, cmock_retval)
void gpioWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpioMap_t pin, bool_t value, bool_t cmock_to_return);
typedef bool_t (* CMOCK_gpioWrite_CALLBACK)(gpioMap_t pin, bool_t value, int cmock_num_calls);
void gpioWrite_AddCallback(CMOCK_gpioWrite_CALLBACK Callback);
void gpioWrite_Stub(CMOCK_gpioWrite_CALLBACK Callback);
#define gpioWrite_StubWithCallback gpioWrite_Stub
#define gpioWrite_IgnoreArg_pin() gpioWrite_CMockIgnoreArg_pin(__LINE__)
void gpioWrite_CMockIgnoreArg_pin(UNITY_LINE_TYPE cmock_line);
#define gpioWrite_IgnoreArg_value() gpioWrite_CMockIgnoreArg_value(__LINE__)
void gpioWrite_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define delayConfig_Ignore() delayConfig_CMockIgnore()
void delayConfig_CMockIgnore(void);
#define delayConfig_Expect(delay, duration) delayConfig_CMockExpect(__LINE__, delay, duration)
void delayConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, delay_t* delay, tick_t duration);
typedef void (* CMOCK_delayConfig_CALLBACK)(delay_t* delay, tick_t duration, int cmock_num_calls);
void delayConfig_AddCallback(CMOCK_delayConfig_CALLBACK Callback);
void delayConfig_Stub(CMOCK_delayConfig_CALLBACK Callback);
#define delayConfig_StubWithCallback delayConfig_Stub
#define delayConfig_ReturnThruPtr_delay(delay) delayConfig_CMockReturnMemThruPtr_delay(__LINE__, delay, sizeof(delay_t))
#define delayConfig_ReturnArrayThruPtr_delay(delay, cmock_len) delayConfig_CMockReturnMemThruPtr_delay(__LINE__, delay, (int)(cmock_len * (int)sizeof(*delay)))
#define delayConfig_ReturnMemThruPtr_delay(delay, cmock_size) delayConfig_CMockReturnMemThruPtr_delay(__LINE__, delay, cmock_size)
void delayConfig_CMockReturnMemThruPtr_delay(UNITY_LINE_TYPE cmock_line, delay_t* delay, int cmock_size);
#define delayConfig_IgnoreArg_delay() delayConfig_CMockIgnoreArg_delay(__LINE__)
void delayConfig_CMockIgnoreArg_delay(UNITY_LINE_TYPE cmock_line);
#define delayConfig_IgnoreArg_duration() delayConfig_CMockIgnoreArg_duration(__LINE__)
void delayConfig_CMockIgnoreArg_duration(UNITY_LINE_TYPE cmock_line);
#define delayRead_IgnoreAndReturn(cmock_retval) delayRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void delayRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define delayRead_ExpectAndReturn(delay, cmock_retval) delayRead_CMockExpectAndReturn(__LINE__, delay, cmock_retval)
void delayRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, delay_t* delay, bool_t cmock_to_return);
typedef bool_t (* CMOCK_delayRead_CALLBACK)(delay_t* delay, int cmock_num_calls);
void delayRead_AddCallback(CMOCK_delayRead_CALLBACK Callback);
void delayRead_Stub(CMOCK_delayRead_CALLBACK Callback);
#define delayRead_StubWithCallback delayRead_Stub
#define delayRead_ReturnThruPtr_delay(delay) delayRead_CMockReturnMemThruPtr_delay(__LINE__, delay, sizeof(delay_t))
#define delayRead_ReturnArrayThruPtr_delay(delay, cmock_len) delayRead_CMockReturnMemThruPtr_delay(__LINE__, delay, (int)(cmock_len * (int)sizeof(*delay)))
#define delayRead_ReturnMemThruPtr_delay(delay, cmock_size) delayRead_CMockReturnMemThruPtr_delay(__LINE__, delay, cmock_size)
void delayRead_CMockReturnMemThruPtr_delay(UNITY_LINE_TYPE cmock_line, delay_t* delay, int cmock_size);
#define delayRead_IgnoreArg_delay() delayRead_CMockIgnoreArg_delay(__LINE__)
void delayRead_CMockIgnoreArg_delay(UNITY_LINE_TYPE cmock_line);
#define delayWrite_Ignore() delayWrite_CMockIgnore()
void delayWrite_CMockIgnore(void);
#define delayWrite_Expect(delay, duration) delayWrite_CMockExpect(__LINE__, delay, duration)
void delayWrite_CMockExpect(UNITY_LINE_TYPE cmock_line, delay_t* delay, tick_t duration);
typedef void (* CMOCK_delayWrite_CALLBACK)(delay_t* delay, tick_t duration, int cmock_num_calls);
void delayWrite_AddCallback(CMOCK_delayWrite_CALLBACK Callback);
void delayWrite_Stub(CMOCK_delayWrite_CALLBACK Callback);
#define delayWrite_StubWithCallback delayWrite_Stub
#define delayWrite_ReturnThruPtr_delay(delay) delayWrite_CMockReturnMemThruPtr_delay(__LINE__, delay, sizeof(delay_t))
#define delayWrite_ReturnArrayThruPtr_delay(delay, cmock_len) delayWrite_CMockReturnMemThruPtr_delay(__LINE__, delay, (int)(cmock_len * (int)sizeof(*delay)))
#define delayWrite_ReturnMemThruPtr_delay(delay, cmock_size) delayWrite_CMockReturnMemThruPtr_delay(__LINE__, delay, cmock_size)
void delayWrite_CMockReturnMemThruPtr_delay(UNITY_LINE_TYPE cmock_line, delay_t* delay, int cmock_size);
#define delayWrite_IgnoreArg_delay() delayWrite_CMockIgnoreArg_delay(__LINE__)
void delayWrite_CMockIgnoreArg_delay(UNITY_LINE_TYPE cmock_line);
#define delayWrite_IgnoreArg_duration() delayWrite_CMockIgnoreArg_duration(__LINE__)
void delayWrite_CMockIgnoreArg_duration(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
